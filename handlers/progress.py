from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.models import WeightRecord, User
from database import get_db
from utils.helpers import generate_progress_graph
from datetime import datetime

class WeightState(StatesGroup):
    waiting_for_weight = State()

async def start_weight_record(message: types.Message):
    await WeightState.waiting_for_weight.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5):"
    )

async def process_weight(message: types.Message, state: FSMContext):
    try:
        weight = float(message.text)
        if not 30 <= weight <= 250:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–µ—Å (–æ—Ç 30 –¥–æ 250 –∫–≥)")
            return

        db = next(get_db())
        user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –≤–µ—Å
        new_weight = WeightRecord(
            user_id=user.id,
            weight=weight
        )
        db.add(new_weight)
        db.commit()

        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Å–∞ –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
        weight_records = (
            db.query(WeightRecord)
            .filter(WeightRecord.user_id == user.id)
            .order_by(WeightRecord.date)
            .all()
        )

        if len(weight_records) > 1:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            graph_buf = await generate_progress_graph(weight_records)
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞
            total_change = weight_records[-1].weight - weight_records[0].weight
            
            await message.answer_photo(
                graph_buf,
                caption=f"–í–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìä\n"
                        f"–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤–µ—Å–∞: {total_change:+.1f} –∫–≥"
            )
        else:
            await message.answer(
                "–í–µ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω! üìä\n"
                "–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø–∏—Å–µ–π."
            )

        await state.finish()

    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70.5)")

async def show_progress(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    weight_records = (
        db.query(WeightRecord)
        .filter(WeightRecord.user_id == user.id)
        .order_by(WeightRecord.date)
        .all()
    )
    
    if len(weight_records) < 2:
        await message.answer(
            "–î–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º –¥–≤–µ –∑–∞–ø–∏—Å–∏ –≤–µ—Å–∞.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /weight –¥–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö."
        )
        return

    graph_buf = await generate_progress_graph(weight_records)
    total_change = weight_records[-1].weight - weight_records[0].weight
    days = (weight_records[-1].date - weight_records[0].date).days
    
    await message.answer_photo(
        graph_buf,
        caption=f"üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞ {days} –¥–Ω–µ–π:\n"
                f"–ù–∞—á–∞–ª—å–Ω—ã–π –≤–µ—Å: {weight_records[0].weight:.1f} –∫–≥\n"
                f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {weight_records[-1].weight:.1f} –∫–≥\n"
                f"–û–±—â–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {total_change:+.1f} –∫–≥"
    )

def register_progress_handlers(dp: Dispatcher):
    dp.register_message_handler(start_weight_record, commands=["weight"])
    dp.register_message_handler(process_weight, state=WeightState.waiting_for_weight)
    dp.register_message_handler(show_progress, commands=["progress"]) 