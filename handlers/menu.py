from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from handlers.subscription import check_subscription
from aiogram.types import WebAppInfo
from config.config import WEBAPP_URL

async def show_main_menu(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    webapp_button = types.KeyboardButton(
        text="üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ",
        web_app=WebAppInfo(url=f"{WEBAPP_URL}/webapp")
    )
    
    buttons = [
        "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å",
        "‚öñÔ∏è –ó–∞–ø–∏—Å–∞—Ç—å –≤–µ—Å",
        "üèãÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏",
        "üçΩ –ü–∏—Ç–∞–Ω–∏–µ",
        webapp_button,
        "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    ]
    keyboard.add(*buttons)
    
    await message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª –∏–ª–∏ –æ—Ç–∫—Ä–æ–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ üëá",
        reply_markup=keyboard
    )

async def show_profile(message: types.Message):
    db = next(get_db())
    user = db.query(User).filter(User.telegram_id == message.from_user.id).first()
    
    subscription_status = "–ê–∫—Ç–∏–≤–Ω–∞" if user.is_subscribed else "–ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    if user.is_subscribed:
        days_left = (user.subscription_end_date - datetime.utcnow()).days
        subscription_status += f" (–æ—Å—Ç–∞–ª–æ—Å—å {days_left} –¥–Ω–µ–π)"
    
    profile_text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–†–æ—Å—Ç: {user.height} —Å–º\n"
        f"–¢–µ–∫—É—â–∏–π –≤–µ—Å: {user.weight} –∫–≥\n"
        f"–ü–æ–ª: {user.gender}\n"
        f"–í–æ–∑—Ä–∞—Å—Ç: {user.age} –ª–µ—Ç\n"
        f"–¶–µ–ª—å: {user.goal}\n\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {subscription_status}"
    )
    
    keyboard = types.InlineKeyboardMarkup()
    keyboard.add(
        types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ", callback_data="edit_profile"),
        types.InlineKeyboardButton("–ü—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="extend_subscription")
    )
    
    await message.answer(profile_text, reply_markup=keyboard)

async def show_help(message: types.Message):
    help_text = (
        "ü§ñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n"
        "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/weight - –ó–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—É—â–∏–π –≤–µ—Å\n"
        "/progress - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å\n"
        "/workout - –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n"
        "/nutrition - –ü–æ–ª—É—á–∏—Ç—å –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è\n"
        "/profile - –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "/subscribe - –û—Ñ–æ—Ä–º–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
        "–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ @admin"
    )
    await message.answer(help_text)

def register_menu_handlers(dp: Dispatcher):
    dp.register_message_handler(show_main_menu, commands=["menu"])
    dp.register_message_handler(show_main_menu, text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    dp.register_message_handler(show_profile, commands=["profile"])
    dp.register_message_handler(show_profile, text="üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å")
    dp.register_message_handler(show_help, commands=["help"])
    dp.register_message_handler(show_help, text="‚ÑπÔ∏è –ü–æ–º–æ—â—å") 