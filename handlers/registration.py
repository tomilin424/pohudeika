from aiogram import types, Dispatcher
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from database.models import User
from services.calculator import calculate_bmr, calculate_daily_calories

class RegistrationStates(StatesGroup):
    waiting_for_height = State()
    waiting_for_weight = State()
    waiting_for_gender = State()
    waiting_for_age = State()
    waiting_for_goal = State()

async def start_registration(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
    
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏—Ç–Ω–µ—Å-–±–æ—Ç! üèÉ‚Äç‚ôÇÔ∏è\n"
        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
        reply_markup=keyboard
    )

async def request_height(message: types.Message):
    await RegistrationStates.waiting_for_height.set()
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —Ä–æ—Å—Ç –≤ —Å–∞–Ω—Ç–∏–º–µ—Ç—Ä–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175):",
        reply_markup=types.ReplyKeyboardRemove()
    )

async def process_height(message: types.Message, state: FSMContext):
    try:
        height = float(message.text)
        if 100 <= height <= 250:
            await state.update_data(height=height)
            await RegistrationStates.waiting_for_weight.set()
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–µ—Å –≤ –∫–∏–ª–æ–≥—Ä–∞–º–º–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 70):")
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–æ—Å—Ç (–æ—Ç 100 –¥–æ 250 —Å–º):")
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")

async def process_gender(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π")
    
    await RegistrationStates.waiting_for_gender.set()
    await message.answer(
        "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à –ø–æ–ª:",
        reply_markup=keyboard
    )

async def process_goal(message: types.Message, state: FSMContext):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–ü–æ—Ö—É–¥–µ–Ω–∏–µ", "–ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤–µ—Å–∞", "–ù–∞–±–æ—Ä –º–∞—Å—Å—ã")
    
    await RegistrationStates.waiting_for_goal.set()
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ü–µ–ª—å:",
        reply_markup=keyboard
    )

def register_registration_handlers(dp: Dispatcher):
    dp.register_message_handler(start_registration, commands=["start"])
    dp.register_message_handler(request_height, text="–ù–∞—á–∞—Ç—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é", state="*")
    dp.register_message_handler(process_height, state=RegistrationStates.waiting_for_height)
    dp.register_message_handler(process_gender, state=RegistrationStates.waiting_for_gender)
    dp.register_message_handler(process_goal, state=RegistrationStates.waiting_for_goal) 